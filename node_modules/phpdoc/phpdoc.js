// Copyright Â© 2015 Bob W. Hogg. All Rights Reserved.
//
// This file is part of phpdoc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Provides a Node.js-compatible wrapper for [phpdoc](https://github.com/phpDocumentor/phpDocumentor2)
 *
 * @module PHPDoc
 */

var _ = require("underscore");
var Class = require("yajscf");
var fs = require("fs");
var spawnSync = require("spawn-sync");
var spawn = require("child_process").spawn;
var which = require("which").sync;

/**
 * PHPDoc is a Node.js-compatible wrapper for [phpdoc](https://github.com/phpDocumentor/phpDocumentor2)
 *
 * @class PHPDoc
 * @constructor
 */
module.exports = Class.extend(
{
    /**
     * Constructor
     *
     * @method init
     * @param {String} [path] Path to the phpdoc executable.
     * If empty, assume "phpdoc".
     * @throws {Error} If we cannot find the phpdoc executable
     */
    init: function(path)
    {
        if(_.isEmpty(path))
        {
            /**
             * Path to the phpdoc executable
             * @type String
             */
            this.path = which("phpdoc");
        }
        else
        {
            this.path = path;
            fs.accessSync(this.path, fs.X_OK);
        }
    },

    /**
     * Run phpdoc with the given options and the given command
     *
     * @method execute
     * @param {String} cmd Command name to run
     * @param {Array} options Options to pass to the docs generator
     * @return {Object} The result of the documentation request
     * @throws {Error} If executing phpdoc failed
     * @private
     */
    execPHPDoc: function(cmd, options)
    {
        var result = spawnSync(this.path, _.union([cmd], _.flatten(options)));
        if(result.error)
        {
            throw result.error;
        }
        return result;
    },

    /**
     * Run phpdoc with the given options and the given command asynchronously
     *
     * @method execute
     * @param {String} cmd Command name to run
     * @param {Array} options Options to pass to the docs generator
     * @return {Object} Child process for phpdoc
     * @private
     */
    execPHPDocAsync: function(cmd, options)
    {
        return spawn(this.path, _.union([cmd], _.flatten(options)));
    },

    /**
     * Run the documentation generator
     *
     * @method run
     * @param {Array} options Options to pass to the docs generator
     * @param {Boolean} [async=false] If true, run asynchronously
     * @return {Object} The result of the documentation request
     * @throws {Error} If executing phpdoc failed
     */
    run: function(options, async)
    {
        return async ? this.execPHPDocAsync("run", options) : this.execPHPDoc("run", options);
    }
});
